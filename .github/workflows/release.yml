name: Release

on:
  push:
    branches:
      - practice-run

env:
  WORKING_DIRECTORY: ${{ github.workspace }}

jobs:
  build:
    runs-on: ubuntu-latest
    name: build
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup .NET Core SDK 6
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Install Amazon.Lambda.Tools
        run: dotnet tool install -g Amazon.Lambda.Tools

      - name: Install dependencies
        run: dotnet restore
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Package lambda
        run: dotnet lambda package
        working-directory: ${{ env.WORKING_DIRECTORY }}/Lambda

      - name: Restore infrastructure NPM packages
        run: npm ci
        working-directory: ${{ env.WORKING_DIRECTORY }}/Infrastructure

      - name: Build infrastructure
        run: dotnet build --configuration Release --runtime linux-x64 --no-self-contained
        working-directory: ${{ env.WORKING_DIRECTORY }}/Infrastructure

      - name: Build set secrets
        run: dotnet build --configuration Release --runtime linux-x64 --no-self-contained
        working-directory: ${{ env.WORKING_DIRECTORY }}/Infrastructure.SetSecrets

      - name: Create infrastructure artifact
        shell: bash
        run: zip -q -r ${{ env.WORKING_DIRECTORY }}/infrastructure.zip *
        working-directory: ${{ env.WORKING_DIRECTORY }}/Infrastructure/bin/Release/net6.0/linux-x64/
        
      - name: Create infrastructure set secrets artifact
        shell: bash
        run: zip -q -r ${{ env.WORKING_DIRECTORY }}/infrastructure-set-secrets.zip *
        working-directory: ${{ env.WORKING_DIRECTORY }}/Infrastructure.SetSecrets/bin/Release/net6.0/linux-x64/

      - name: Upload lambda artifact
        uses: actions/upload-artifact@v3
        with:
          name: lambda
          path: ${{ env.WORKING_DIRECTORY }}/Lambda/bin/Release/net6.0/Lambda.zip
          if-no-files-found: error

      - name: Upload infrastructure artifact
        uses: actions/upload-artifact@v3
        with:
          name: infrastructure
          path: ${{ env.WORKING_DIRECTORY }}/infrastructure.zip
          if-no-files-found: error
          
      - name: Upload infrastructure set secrets artifact
        uses: actions/upload-artifact@v3
        with:
          name: infrastructure-set-secrets
          path: ${{ env.WORKING_DIRECTORY }}/infrastructure-set-secrets.zip
          if-no-files-found: error
          
  release:
    runs-on: ubuntu-latest
    name: release
    needs: build
    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: ${{ env.WORKING_DIRECTORY }}/artifacts

    - name: Setup .NET Core SDK 6
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: lts/*
        
    - name: Setup lambda ASSET_CODE_PATH env
      run: |
        echo "ASSET_CODE_PATH=${{ env.WORKING_DIRECTORY }}/artifacts/lambda/Lambda.zip" >> $GITHUB_ENV
        
    - name: Unzip infrastructure artifact
      run: |
        unzip -q ${{ env.WORKING_DIRECTORY }}/artifacts/infrastructure/infrastructure.zip -d ${{ env.WORKING_DIRECTORY }}/infrastructure

      # Unfortunately, the symlinks in node_modules/.bin aren't retained as part of artifact copying so we need to reconstruct them
    - name: Fix symlinks
      run: |
        ln -s ../aws-cdk/bin/cdk node_modules/.bin/cdk -f
        chmod -R a+x node_modules
      working-directory: ${{ env.WORKING_DIRECTORY }}/infrastructure

    - name: Unzip infrastructure-set-secrets artifact
      run: |
        unzip -q ${{ env.WORKING_DIRECTORY }}/artifacts/infrastructure-set-secrets/infrastructure-set-secrets.zip -d ${{ env.WORKING_DIRECTORY }}/infrastructure-set-secrets

    - name: Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: CDK bootstrap
      run: npm run bootstrap
      working-directory: ${{ env.WORKING_DIRECTORY }}/infrastructure
      
    - name: CDK deploy
      run: npm run deploy
      working-directory: ${{ env.WORKING_DIRECTORY }}/infrastructure
      
    - name: CDK set secrets
      run: dotnet Infrastructure.SetSecrets.dll
      working-directory: ${{ env.WORKING_DIRECTORY }}/infrastructure-set-secrets